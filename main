from flask import Flask, render_template, request, redirect

app = Flask(__name__)

# 学生信息存储在列表中
students = []

@app.route('/')
def index():
    return render_template('index.html', students=students)

@app.route('/add', methods=['POST'])
def add():
    # 从表单中获取学生信息
    name = request.form.get('name')
    age = int(request.form.get('age'))
    score = float(request.form.get('score'))
    
    # 创建学生字典并添加到学生列表
    student = {'name': name, 'age': age, 'score': score}
    students.append(student)
    
    # 重定向到首页
    return redirect('/')

@app.route('/edit/<int:index>', methods=['GET', 'POST'])
def edit(index):
    # 获取指定索引的学生信息
    student = students[index]
    
    if request.method == 'POST':
        # 从表单中获取修改后的学生信息
        name = request.form.get('name')
        age = int(request.form.get('age'))
        score = float(request.form.get('score'))
        
        # 更新学生信息
        student['name'] = name
        student['age'] = age
        student['score'] = score
        
        # 重定向到首页
        return redirect('/')
    
    # 渲染编辑页面并传递学生信息
    return render_template('edit.html', student=student, index=index)

@app.route('/delete/<int:index>', methods=['POST'])
def delete(index):
    # 删除指定索引的学生信息
    del students[index]
    
    # 重定向到首页
    return redirect('/')

if __name__ == '__main__':
    app.run(debug=True)


//以上代码使用了 Flask 框架创建了一个简单的学生信息管理系统。学生信息存储在一个列表（students）中，每个学生信息以字典形式存储。index() 函数用于渲染主页模板并显示学生列表，add() 函数用于处理添加学生信息的请求，edit() 函数用于处理编辑学生信息的请求，delete() 函数用于处理删除学生信息的请求。

//在编辑学生信息时，可以通过访问 /edit/<index> 路由来编辑特定索引的学生信息。编辑页面使用了 GET 和 POST 方法，GET 方法用于渲染编辑页面并显示学生信息，POST 方法用于接收修改后的学生信息并更新列表中的学生信息。

//请注意，这只是一个简单的示例，实际项目中可能需要更多的功能和数据验证，如学生信息的唯一性检查、输入验证等。此示例主要用于演示一个简单的学生信息管理系统的基本结构和功能。
